myglm.error$delta # delta is the cv estimate or the error rate - raw and adjusted
myglm.error2 = cv.glm(data = mydiamonds, myglm, K=5) # using K I can adjust the
myglm.error2$delta
plot(faithful$waiting, faithful$eruptions)
mymodel = glm(data = faithful[1:136,], waiting ~ eruptions)
mean((faithful$waiting - predict(mymodel, faithful))[137:272]^2)
mean((faithful$waiting[137:272] - predict(mymodel, faithful[137:272,]))^2)
View(mydiamonds)
library(boot) # for the cv.glm function
mymodel2 = glm(data=faithful, waiting ~ eruptions)
faithful
view(faithful)
view("faithful")
faithful
cv.result = cv.glm(data = faithful, mymodel2, K = 5)
cv.result$delta
?mtcars
attach(mtcars)
library(lattice)
# we want to create a model to classify the number of cylinders
#according to weight and mpg
with(mtcards, xyplot(wt ~ mpg, group=cyl,auto,key=T,pch=20, cex=3))
with(mtcars, xyplot(wt ~ mpg, group=cyl,auto,key=T,pch=20, cex=3))
with(mtcars, xyplot(wt ~ mpg, group=cyl,auto.key=T,pch=20, cex=3))
library(class)
?knn
train <- cbind(mpg, wt)
knn(train, test, cl=cyl,k=2,prob=T)
test<- c(26,2.2)
knn(train, test, cl=cyl,k=2,prob=T)
?lda
library(MASS)
?lda
mylda = lda(data-mtcars, cyl ~ wt + mpg)
mylda = lda(data=mtcars, cyl ~ wt + mpg)
mylda
plot(mylda)
wt= c(2.2,4,1.1,5)
mpg=c(26,20,27,15)
class=c(4,6,4,8)
test=data.frame(wt, mpg,class)
mylda.prediction=predict(object=mylda,newdata=test[,c(1,2)]$class)
# we specify that we want the class as output
mylda.prediction
table(mylda.prediction, test[,3])
mylda.prediction
table(mylda.prediction, test[,3])
sort.list(mylda)
mylda.prediction = predict(object = mylda, newdata = test[,c(1,2)])$class
# we specify that we want the class as output
mylda.prediction
table(mylda.prediction, test[,3])
sbest <- ets(xt)
########################################################
# Forecasting Models with R                            #
# 3. Moving Averages and Exponential Smoothing Methods #
# (c) Diego Fernandez Garcia 2016                      #
# www.exfinsis.com                                     #
########################################################
# 1.1. Load R packages
library("forecast")
library("tseries")
# 1.2. Set working directory
# getwd()
# setwd("C:/.../Forecasting Models with R")
# 1.3. Read .CSV file
x <- read.csv("Apple_Daily.csv",header=T)
# plot(x, type="l",main="Daily Apple Stock Prices 10/2014-10/2015",ylab="Level",xlab="Day")
# 1.4. Delimit training range
xt <- window(x[,2],end=252)
# plot(xt, type="l",main="Daily Apple Stock Prices 10/2014-09/2015",ylab="Level",xlab="Day",xlim=c(1,274))
# 1.5. Delimit forecasting test range
xf <- window(x[,2],start=253)
# plot(xf, type="l",main="Daily Apple Stock Prices 10/2015",ylab="Level",xlab="Day")
# 1.6. Automatic script run
# For .txt file
## Ctrl + A and paste in console
# For .R file
## source("1. Forecasting Models Data.R",echo=T)
#########
# 2.1. Arithmetic Mean
mean <- meanf(xt,h=22)
# plot(mean,main="Arithmetic Mean Method",ylab="Level",xlab="Day")
# lines(x)
# 2.2. Naïve or Random Walk Method
rw1 <- naive(xt,h=22)
rw2 <- rwf(xt,h=22)
# plot(rw1,main="Naïve or Random Walk Method 1",ylab="Level",xlab="Day")
# plot(rw2,main="Naïve or Random Walk Method 2",ylab="Level",xlab="Day")
# lines(x)
# 2.3. Seasonal Random Walk Method
srw <- snaive(xt,h=22)
# plot(srw,main="Seasonal Naïve Method",ylab="Level",xlab="Day")
# lines(x)
# 2.4. Random Walk with Drift Method
rwd <- rwf(xt,drift=T,h=22)
# plot(rwd,main="Random Walk with Drift Method",ylab="Level",xlab="Day")
# lines(x)
# 2.5. Forecasting Accuracy
# Training set = Data from 1 to 252 (1/oct/2014 - 29/sep/2015)
# Test set = Data form 253 to 274 (1/oct/2015 - 30/oct/2015)
accuracy(mean,xf)
accuracy(rw1,xf)
accuracy(srw,xf)
accuracy(rwd,xf)
##########
# 3.1. Simple Moving Average SMA
sma5 <- ma(xt,5)
sma20 <- ma(xt,20)
plot(sma5,main="Simple Moving Average SMA",ylab="Level",xlab="Day",col=4)
lines(sma20,col=3) # 3 is green, # 4 is blue
lines(x)
plot(forecast(sma5,h=22),main="Simple Moving Average SMA",ylab="Level",xlab="Day",col=4)
lines(x)
# 3.2. Brown's Simple Exponential Smoothing ETS(A,N,N)
brown1 <- ses(xt,h=22)
brown2 <- ets(xt,model="ANN",damped=F)
# Chart
plot(brown1,main="Brown's Simple Exponential Smoothing ETS(A,N,N)",ylab="Level",xlab="Day")
lines(x)
# Smoothing Parameters
brown2
# 3.3. Holt's Linear Trend Method ETS(A,A,N)
holt1 <- holt(xt,h=22)
holt2 <- ets(xt,model="AAN",damped=F)
# Chart
plot(holt1,main="Holt's Linear Trend Method ETS(A,A,N)",ylab="Level",xlab="Day")
lines(x)
# Smoothing Parameters
holt2
# 3.4. Exponential Trend Method ETS(A,M,N)
exp1 <- holt(xt,h=22,exponential=T)
## exp2 <- ets(xt,model="AMN",damped=F)
# Chart
plot(exp1,main="Exponential Trend Method ETS(A,M,N)",ylab="Level",xlab="Day")
lines(x)
# Smoothing Parameters
## exp2
## ets model combination not supported
# 3.5. Gardner's Additive Damped Trend Method ETS(A,Ad,N)
gardner1 <- holt(xt,h=22,damped=T)
gardner2 <- ets(xt,model="AAN",damped=T)
# Chart
plot(gardner1,main="Gardner's Additive Damped Trend Method ETS(A,Ad,N)",ylab="Level",xlab="Day")
lines(x) # Chart now shows original data (x) versus the forecast
# Smoothing Parameters
gardner2
# 3.6. Taylor's Multiplicative Damped Trend Method ETS(A,Md,N)
taylor1 <- holt(xt,h=22,exponential=T,damped=T)
## taylor2 <- ets(xt,model="AMN",damped=T)
# Chart
plot(taylor1,main="Taylor's Multiplicative Damped Trend Method ETS(A,Md,N)",ylab="Level",xlab="Day")
lines(x)
library("forecast")
library("tseries")
x <- read.csv("Apple_Daily.csv",header=T)
getwd()
setwd("H:/Forecasting Models in R")
x <- read.csv("Apple_Daily.csv",header=T)
# 1.4. Delimit training range
xt <- window(x[,2],end=252)
# plot(xt, type="l",main="Daily Apple Stock Prices 10/2014-09/2015",ylab="Level",xlab="Day",xlim=c(1,274))
# 1.5. Delimit forecasting test range
xf <- window(x[,2],start=253)
# plot(xf, type="l",main="Daily Apple Stock Prices 10/2015",ylab="Level",xlab="Day")
# 1.6. Automatic script run
# For .txt file
## Ctrl + A and paste in console
# For .R file
## source("1. Forecasting Models Data.R",echo=T)
#########
# 2.1. Arithmetic Mean
mean <- meanf(xt,h=22)
# plot(mean,main="Arithmetic Mean Method",ylab="Level",xlab="Day")
# lines(x)
# 2.2. Naïve or Random Walk Method
rw1 <- naive(xt,h=22)
rw2 <- rwf(xt,h=22)
# plot(rw1,main="Naïve or Random Walk Method 1",ylab="Level",xlab="Day")
# plot(rw2,main="Naïve or Random Walk Method 2",ylab="Level",xlab="Day")
# lines(x)
# 2.3. Seasonal Random Walk Method
srw <- snaive(xt,h=22)
# plot(srw,main="Seasonal Naïve Method",ylab="Level",xlab="Day")
# lines(x)
# 2.4. Random Walk with Drift Method
rwd <- rwf(xt,drift=T,h=22)
# plot(rwd,main="Random Walk with Drift Method",ylab="Level",xlab="Day")
# lines(x)
# 2.5. Forecasting Accuracy
# Training set = Data from 1 to 252 (1/oct/2014 - 29/sep/2015)
# Test set = Data form 253 to 274 (1/oct/2015 - 30/oct/2015)
accuracy(mean,xf)
accuracy(rw1,xf)
accuracy(srw,xf)
accuracy(rwd,xf)
##########
# 3.1. Simple Moving Average SMA
sma5 <- ma(xt,5)
sma20 <- ma(xt,20)
plot(sma5,main="Simple Moving Average SMA",ylab="Level",xlab="Day",col=4)
lines(sma20,col=3) # 3 is green, # 4 is blue
lines(x)
plot(forecast(sma5,h=22),main="Simple Moving Average SMA",ylab="Level",xlab="Day",col=4)
lines(x)
# 3.2. Brown's Simple Exponential Smoothing ETS(A,N,N)
brown1 <- ses(xt,h=22)
brown2 <- ets(xt,model="ANN",damped=F)
# Chart
plot(brown1,main="Brown's Simple Exponential Smoothing ETS(A,N,N)",ylab="Level",xlab="Day")
lines(x)
# Smoothing Parameters
brown2
# 3.3. Holt's Linear Trend Method ETS(A,A,N)
holt1 <- holt(xt,h=22)
holt2 <- ets(xt,model="AAN",damped=F)
# Chart
plot(holt1,main="Holt's Linear Trend Method ETS(A,A,N)",ylab="Level",xlab="Day")
lines(x)
# Smoothing Parameters
holt2
# 3.4. Exponential Trend Method ETS(A,M,N)
exp1 <- holt(xt,h=22,exponential=T)
## exp2 <- ets(xt,model="AMN",damped=F)
# Chart
plot(exp1,main="Exponential Trend Method ETS(A,M,N)",ylab="Level",xlab="Day")
lines(x)
# Smoothing Parameters
## exp2
## ets model combination not supported
# 3.5. Gardner's Additive Damped Trend Method ETS(A,Ad,N)
gardner1 <- holt(xt,h=22,damped=T)
gardner2 <- ets(xt,model="AAN",damped=T)
# Chart
plot(gardner1,main="Gardner's Additive Damped Trend Method ETS(A,Ad,N)",ylab="Level",xlab="Day")
lines(x) # Chart now shows original data (x) versus the forecast
# Smoothing Parameters
gardner2
# 3.6. Taylor's Multiplicative Damped Trend Method ETS(A,Md,N)
taylor1 <- holt(xt,h=22,exponential=T,damped=T)
## taylor2 <- ets(xt,model="AMN",damped=T)
# Chart
plot(taylor1,main="Taylor's Multiplicative Damped Trend Method ETS(A,Md,N)",ylab="Level",xlab="Day")
lines(x)
# Smoothing Parameters
## taylor2
## ets model combination not supported
# 3.7. Holt-Winters Additive Method ETS(A,A,A)
## hwa1 <- hw(xt,h=22,seasonal="additive")
## hwa2 <- ets(xt,model="AAA",damped=F)
# Chart
## plot(hwa1,main="Holt-Winters Additive Method ETS(A,A,A)",ylab="Level",xlab="Day")
## lines(x)
# Smoothing Parameters
## hwa2
## Ets error = Non-seasonal data
# 3.8. Holt-Winters Multiplicative Method ETS(A,A,M)
## hwm1 <- hw(xt,h=22,seasonal="multiplicative")
## hwm2 <- ets(xt,model="AAM",damped=F)
# Chart
## plot(hwm1,main="Holt-Winters Multiplicative Method ETS(A,A,M)",ylab="Level",xlab="Day")
## lines(x)
# Smoothing Parameters
## hwm2
## Ets error = Non-seasonal data
# 3.9. Holt-Winters Damped Method ETS(A,Ad,M)
## hwd1 <- hw(xt,h=22,seasonal="multiplicative",damped=T)
## hwd2 <- ets(xt,model="AAM",damped=T)
# Chart
## plot(hwd1,main="Holt-Winters Damped Method ETS(A,Ad,M)",ylab="Level",xlab="Day")
## lines(x)
# Smoothing Parameters
## hwd2
## Ets error= Non-seasonal data
# 3.10. Method Selection
# Best fitting training set
# Training set = Data from 1 to 252 (1/oct/2014 - 29/sep/2015)
sbest <- ets(xt)
sbest
# Decomposition of ETS method
plot(ets(xt))
# 3.11. Method Forecasting Accuracy
# Best forecast test set
# Training set = Data from 1 to 252 (1/oct/2014 - 29/sep/2015)
# Test set = Data form 253 to 274 (1/oct/2015 - 30/oct/2015)
accuracy(forecast(sma5,h=22),xf)
accuracy(forecast(sma20,h=22),xf)
accuracy(brown1,xf)
accuracy(holt1,xf)
accuracy(exp1,xf)
accuracy(gardner1,xf)
accuracy(taylor1,xf)
accuracy(forecast(sbest,h=22),xf)
install.packages("githubinstall")
?githubinstall
?ghit
acf(xt)
pacf(xt)
# Augmented Dickey-Fuller Test ADF
adf.test(xt, alternative = "stationary")
?acf
kpss.test(diff(xt))
kpss.test(xt)
plot(x, type="l",main="Daily Apple Stock Prices 10/2014-10/2015",ylab="Level",xlab="Day")
plot(diff(x[,2]), type="l",main="Daily Apple Stock Prices Returns 10/2014-10/2015",ylab="Returns",xlab="Day")
acf(diff(xt))
pacf(diff(xt))
# Augmented Dickey-Fuller Test ADF
adf.test(diff(xt), alternative = "stationary")
kpss.test(diff(xt))
arw1 <- rwf(xt,h=22)
arw2 <- Arima(xt,order=c(0,1,0))
grw1 <- rwf(log(xt),h=22)
grw2 <- Arima(log(xt), order=c(0,1,0))
acf(xt)
pacf(xt)
acf(diff(xt))
pacf(diff(xt))
# 4.4. Random Walk Model ARIMA(0,1,0) without constant (AutoRegressive Integrated Moving Average)
plot(arw1,main="Random Walk Model ARIMA(0,1,0) without constant",ylab="Level",xlab="Day")
lines(x)
# ARIMA Coefficients
summary(arw2)
plot(arw1,main="Random Walk Model ARIMA(0,1,0) without constant",ylab="Level",xlab="Day")
plot(grw1,main="Geometric Random Walk Model ARIMA(0,1,0) without constant",ylab="Level",xlab="Day")
arwd1 <- Arima(xt,order=c(0,1,0),include.mean=T)
arwd2 <- Arima(diff(xt),order=c(0,0,0),include.mean=T)
grwd1 <- rwf(log(xt),drift=T,h=22)
grwd2 <- Arima(log(xt), order=c(0,1,0),include.mean=T)
grwd3 <- Arima(diff(log(xt)),order=c(0,0,0),include.mean=T)
plot(forecast(arwd1,h=22),main="Random Walk Model with Drift ARIMA(0,1,0) with constant",ylab="Level",xlab="Day")
lines(x)
# ARIMA Coefficients
summary(arwd2)
summary(grwd3)
ar <- Arima(xt, order=c(1,0,0),include.mean=T)
# Chart
plot(forecast(ar,h=22),main="First Order Autoregressive ARIMA(1,0,0) with constant",ylab="Level",xlab="Day")
lines(x)
# Coefficients
plot(forecast(ar,h=22),main="First Order Autoregressive ARIMA(1,0,0) with constant",ylab="Level",xlab="Day")
lines(x)
# ARIMA Coefficients
summary(dar1b)
summary(ar)
dar1a <- Arima(xt, order=c(1,1,0),include.mean=T)
dar1b <- Arima(diff(xt), order=c(1,0,0),include.mean=T)
# Charts
plot(forecast(dar1a,h=22),main="Differentiated First Order Autoregressive ARIMA(1,0,0) with constant",ylab="Level",xlab="Day")
lines(x)
# ARIMA Coefficients
summary(dar1b)
abrown <- Arima(xt, order=c(0,1,1))
# Chart
plot(forecast(abrown,h=22),main="Brown's Simple Exponential Smoothing ARIMA(0,1,1) without constant",ylab="Level",xlab="Day")
lines(x)
abrownga <- Arima(xt, order=c(0,1,1),include.mean=T)
abrowngb <- Arima(diff(xt), order=c(0,0,1),include.mean=T)
# Charts
plot(forecast(abrownga,h=22),main="Simple Exponential Smoothing  with Growth ARIMA(0,1,1) with constant",ylab="Level",xlab="Day")
lines(x)
# ARIMA Coefficients
summary(abrowngb)
aholt1 <- Arima(xt, order=c(0,2,1),include.mean=T)
aholt2 <- Arima(diff(diff(xt)),order=c(0,0,1),include.mean=T)
aholt3 <- Arima(xt, order=c(0,2,2))
# Charts
plot(forecast(aholt1,h=22),main="Holt's Linear Trend ARIMA(0,2,1) with constant",ylab="Level",xlab="Day")
plot(forecast(aholt3,h=22),main="Holt's Linear Trend ARIMA(0,2,2) without constant",ylab="Level",xlab="Day")
lines(x)
# ARIMA Coefficients
summary(aholt2)
summary(aholt3)
agardner <- Arima(xt,order=c(1,1,2))
# Chart
plot(forecast(agardner,h=22),main="Gardner's Additive Damped Trend ARIMA(1,1,2) without constant",ylab="Level",xlab="Day")
lines(x)
# Coefficients
summary(agardner)
srwd1 <- Arima(xt,order=c(0,0,0), seasonal=c(0,1,0),include.mean=T)
srwd2 <- Arima(diff(xt,lag=5),order=c(0,0,0),seasonal=c(0,0,0),include.mean=T) # lag=5 for weekly seasonality
plot(forecast(srwd1,h=22),main="Seasonal Random Walk with Drift ARIMA(0,0,0)x(0,1,0)m with constant",ylab="Level",xlab="Day")
lines(x)
summary(srwd2)
srt <- Arima(xt,order=c(0,1,0),seasonal=c(0,1,0))
# Chart
plot(forecast(srt,h=22),main="Seasonal Random Trend ARIMA(0,1,0)x(0,1,0)m without constant",ylab="Level",xlab="Day")
lines(x)
# Coefficients
summary(srt)
gseas <- Arima(xt,order=c(0,1,1),seasonal=c(0,1,1))
# Chart
plot(forecast(gseas,h=22),main="General Seasonal Model ARIMA(0,1,1)x(0,1,1)m without constant",ylab="Level",xlab="Day")
lines(x)
# Coefficients
summary(gseas)
gsar1a <- Arima(xt,order=c(1,0,1),seasonal=c(0,1,1),include.mean=T)
gsar1b <- Arima(diff(xt,lag=5),order=c(1,0,1),seasonal=c(0,0,1),include.mean=T)
# Charts
plot(forecast(gsar1a,h=22),main="General First Order Autoregressive Seasonal Model ARIMA(1,0,1)x(0,1,1)m with constant",ylab="Level",xlab="Day")
lines(x)
# ARIMA Coefficients
summary(gsar1b)
sdar1a <- Arima(xt,order=c(1,0,0),seasonal=c(0,1,0),include.mean=T)
sdar1b <- Arima(diff(xt,lag=5), order=c(1,0,0),seasonal=c(0,0,0),include.mean=T)
# Charts
plot(forecast(sdar1a,h=22),main="Seasonally Differentiated First Order Autoregressive ARIMA(1,0,0)x(0,1,0)m with constant",ylab="Level",xlab="Day")
lines(x)
# ARIMA Coefficients
summary(sdar1b)
ahwa <- Arima(xt,order=c(0,1,6),seasonal=c(0,1,0))
# Chart
plot(forecast(ahwa,h=22),main="Holt-Winters Additive Seasonality ARIMA (0,1,6)X(0,1,0)5 without constant",ylab="Level",xlab="Day")
lines(x)
# ARIMA Coefficients
summary(ahwa)
abest <- auto.arima(xt)
abest
accuracy(forecast(arw1,h=22),xf)
accuracy(forecast(ar,h=22),xf)
accuracy(forecast(dar1a,h=22),xf)
accuracy(forecast(abrown,h=22),xf)
accuracy(forecast(abrownga,h=22),xf)
accuracy(forecast(aholt1,h=22),xf)
accuracy(forecast(agardner,h=22),xf)
accuracy(forecast(srwd1,h=22),xf)
accuracy(forecast(srt,h=22),xf)
accuracy(forecast(gseas,h=22),xf)
accuracy(forecast(gsar1a,h=22),xf)
accuracy(forecast(sdar1a,h=22),xf)
accuracy(forecast(ahwa,h=22),xf)
accuracy(forecast(abest,h=22),xf)
accuracy(forecast(grwd1, h=22),xf)
accuracy(forecast(sma20,h=22),xf)
accuracy(forecast(sma20,h=22),xf)
accuracy(holt1,xf)
abest
acf(residuals(abest))
pacf(residuals(abest))
# Ljung.Box Autocorrelation Test
Box.test(residuals(abest),lag=10,type="Ljung")
.0507/.118
csign=.0507/.1180
csign
setwd(H:/R Shiny)
setwd("H:/R Shiny")
ui <- fluidPage("Hello World")
library(shiny)
install.packages("shiny")
ui <- fluidPage("Hello World")
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input,output) {}
shinyApp(ui = ui, server = server)
sliderInput(inputId = "nom",
label = "Choose a number",
value = 25, min = 1, mac = 100)
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, mac = 100)
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
source('H:/R Shiny/Section1.R')
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
server <- function(input,output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100))
server <- function(input,output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input,output) {}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$hist <- renderPlot({ hist(rnorm(100))})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$hist <- renderPlot({ hist(rnorm(input$num), main = title)})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$hist <- renderPlot({ hist(rnorm(100), main = title)})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({ hist(rnorm(100), main = title)})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(100), main = title)
})
}
shinyApp(ui = ui, server = server)
